/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************************!*\
  !*** ./src/view/site/index.ts ***!
  \********************************/

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
document.addEventListener("DOMContentLoaded", () => {
    const eventSource = new EventSource("/events");
    const mermaid = window.mermaid;
    eventSource.onmessage = function (event) {
        const contentElement = document.getElementById("content");
        if (contentElement) {
            contentElement.innerHTML = decodeURIComponent(event.data);
            mermaid.init(undefined, contentElement.querySelectorAll(".mermaid"));
            processGeoJson(contentElement);
        }
    };
    fetch("/preview")
        .then((response) => response.text())
        .then((content) => {
        const contentElement = document.getElementById("content");
        if (contentElement) {
            contentElement.innerHTML = content;
            mermaid.init(undefined, contentElement.querySelectorAll(".mermaid"));
            processGeoJson(contentElement);
        }
    });
    function processGeoJson(contentElement) {
        const L = window.L;
        const nodes = Array.from(contentElement.querySelectorAll(".geojson"));
        for (const node of nodes) {
            try {
                const mapId = node.id;
                const mapContent = node.innerHTML;
                const geojson = JSON.parse(mapContent);
                node.innerHTML = "";
                const map = L.map(mapId).setView([
                    geojson.features[0].geometry.coordinates[1],
                    geojson.features[0].geometry.coordinates[0],
                ], 10); // Set initial view
                L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                    maxZoom: 19,
                    attribution: "Â© OpenStreetMap",
                }).addTo(map);
                // Add GeoJSON layer
                L.geoJSON(mapContent).addTo(map);
            }
            catch { }
        }
    }
});

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TCxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXJrZG93bi1hZ2VudC8uL3NyYy92aWV3L3NpdGUvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgICBjb25zdCBldmVudFNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZShcIi9ldmVudHNcIik7XG4gICAgY29uc3QgbWVybWFpZCA9ICh3aW5kb3cgYXMgYW55KS5tZXJtYWlkO1xuXG4gICAgZXZlbnRTb3VyY2Uub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50OiBNZXNzYWdlRXZlbnQpIHtcbiAgICAgICAgY29uc3QgY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRlbnRcIik7XG4gICAgICAgIGlmIChjb250ZW50RWxlbWVudCkge1xuICAgICAgICAgICAgY29udGVudEVsZW1lbnQuaW5uZXJIVE1MID0gZGVjb2RlVVJJQ29tcG9uZW50KGV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgbWVybWFpZC5pbml0KFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjb250ZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1lcm1haWRcIiksXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBwcm9jZXNzR2VvSnNvbihjb250ZW50RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZmV0Y2goXCIvcHJldmlld1wiKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLnRleHQoKSlcbiAgICAgICAgLnRoZW4oKGNvbnRlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250ZW50XCIpO1xuICAgICAgICAgICAgaWYgKGNvbnRlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGVudEVsZW1lbnQuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICAgICAgICAgICAgICBtZXJtYWlkLmluaXQoXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tZXJtYWlkXCIpLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBwcm9jZXNzR2VvSnNvbihjb250ZW50RWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0dlb0pzb24oY29udGVudEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IEwgPSAod2luZG93IGFzIGFueSkuTDtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBBcnJheS5mcm9tKGNvbnRlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZ2VvanNvblwiKSk7XG5cbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcElkID0gbm9kZS5pZDtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXBDb250ZW50ID0gbm9kZS5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2VvanNvbiA9IEpTT04ucGFyc2UobWFwQ29udGVudCk7XG4gICAgICAgICAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbWFwID0gTC5tYXAobWFwSWQpLnNldFZpZXcoXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2pzb24uZmVhdHVyZXNbMF0uZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9qc29uLmZlYXR1cmVzWzBdLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxMCxcbiAgICAgICAgICAgICAgICApOyAvLyBTZXQgaW5pdGlhbCB2aWV3XG5cbiAgICAgICAgICAgICAgICBMLnRpbGVMYXllcihcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZ1wiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhab29tOiAxOSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9uOiBcIsKpIE9wZW5TdHJlZXRNYXBcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcCk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgR2VvSlNPTiBsYXllclxuICAgICAgICAgICAgICAgIEwuZ2VvSlNPTihtYXBDb250ZW50KS5hZGRUbyhtYXApO1xuICAgICAgICAgICAgfSBjYXRjaCB7fVxuICAgICAgICB9XG4gICAgfVxufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=